{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["menu","react_default","a","createElement","Item","key","dataSource","Object","toConsumableArray","Array","map","i","index","name","type","amount","date","status","columns","title","dataIndex","render","avatar","style","backgroundColor","icon","props","dropdown","overlay","es_button","transform","App","radioStyle","display","height","lineHeight","Fragment","breadcrumb","row","gutter","col","span","float","Group","es_switch","defaultChecked","size","table","rowSelection","pagination","card","background","es_radio","value","es_select","defaultValue","width","Option","date_picker","placeholder","block","React","Component","Boolean","window","location","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f73b3038.chunk.js","sourcesContent":["import React from 'react';\nimport {\n  Avatar,\n  Breadcrumb,\n  Button,\n  Card,\n  Col,\n  DatePicker,\n  Dropdown,\n  Icon,\n  Menu,\n  Radio,\n  Row,\n  Select,\n  Switch,\n  Table,\n} from 'antd';\n\nimport './App.css';\n\nconst menu = (\n  <Menu>\n    <Menu.Item key=\"1\">1st action</Menu.Item>\n    <Menu.Item key=\"2\">2nd action</Menu.Item>\n    <Menu.Item key=\"3\">3rd action</Menu.Item>\n    <Menu.Item key=\"4\">4th action</Menu.Item>\n  </Menu>\n);\n\nconst dataSource = [...Array(15)].map((i, index) => ({\n  key: index,\n  name: 'Mattie Wilson',\n  type: 'TOIL (in days)',\n  amount: '+0.5d',\n  date: '28/12/2018',\n  status: '+info required'\n}));\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n    render: (name) => (\n      <div><Avatar style={{ backgroundColor: '#BF795C' }} icon=\"user\" /> {name}</div>\n    )\n  },\n  {\n    title: 'Type',\n    dataIndex: 'type',\n    key: 'type',\n  },\n  {\n    title: 'Date',\n    dataIndex: 'date',\n    key: 'date',\n    render: (date, props) => (\n      <div>{props.amount} {date}</div>\n    )\n  },\n  {\n    title: 'Status',\n    dataIndex: 'status',\n    key: 'status',\n  },\n  {\n    key: 'actions',\n    render: () => (\n      <Dropdown overlay={menu}>\n        <Button>\n          Actions <Icon type=\"ellipsis\" style={{ transform: 'rotate(90deg)' }} />\n        </Button>\n      </Dropdown>\n\n    )\n  },\n  {\n    key: 'view',\n    render: () => (\n      <div>View <Icon type=\"right\" /></div>\n    )\n  }\n];\n\nexport default class App extends React.Component {\n  render() {\n    const radioStyle = {\n      display: 'block',\n      height: '30px',\n      lineHeight: '30px',\n    };\n\n    return (\n      <>\n      <Breadcrumb>\n         <Breadcrumb.Item>CiviCloud</Breadcrumb.Item>\n        <Breadcrumb.Item>Leave</Breadcrumb.Item>\n        <Breadcrumb.Item>Leave Requests</Breadcrumb.Item>\n      </Breadcrumb>\n      <div>\n        <Row gutter={8}>\n          <Col span={12}>\n            <h1><Icon type=\"calendar\" />Leave Requests</h1>\n          </Col>\n          <Col span={12}>\n            <div style={{ float: 'right' }}>\n              Record\n              <Button.Group>\n                <Button>Absence <Icon type=\"user\" /></Button>\n                <Button>Overtime <Icon type=\"clock-circle\" /></Button>\n              </Button.Group>\n              <Button>Show Filters<Switch defaultChecked size=\"small\" /></Button>\n            </div>\n          </Col>\n        </Row>\n        <Row gutter={8}>\n          <Col span={18}>\n            <Table\n              rowSelection={{}}\n              dataSource={dataSource}\n              columns={columns}\n              pagination={false}\n              size=\"small\" />\n          </Col>\n          <Col span={6}>\n            <Card style={{ background: '#e6e6e6' }}>\n              <Card>\n                <Radio.Group value={2}>\n                  <Radio style={radioStyle} value={1}>Assigned to me</Radio>\n                  <Radio style={radioStyle} value={2}>Unassigned</Radio>\n                  <Radio style={radioStyle} value={3}>View all</Radio>\n                </Radio.Group>\n              </Card>\n              <Select defaultValue={2} style={{width: '100%'}}>\n                <Select.Option value={1}>Period 2017</Select.Option>\n                <Select.Option value={2}>Period 2018</Select.Option>\n                <Select.Option value={3}>Period 2019</Select.Option>\n                <Select.Option value={4}>Period 2020</Select.Option>\n              </Select>\n              <Select defaultValue={1} style={{width: '100%'}}>\n                <Select.Option value={1}>Department</Select.Option>\n                <Select.Option value={2}>IT</Select.Option>\n                <Select.Option value={3}>HR</Select.Option>\n                <Select.Option value={4}>Accounting</Select.Option>\n              </Select>\n              <Select defaultValue={1} style={{width: '100%'}}>\n                <Select.Option value={1}>Region</Select.Option>\n                <Select.Option value={2}>Europe</Select.Option>\n                <Select.Option value={3}>Africa</Select.Option>\n                <Select.Option value={4}>USA</Select.Option>\n              </Select>\n              <DatePicker placeholder=\"Start Date\"  style={{width: '100%'}} />\n              <Button type=\"primary\" size=\"large\" block>\n                Apply Filters\n                <Icon type=\"sync\" />\n              </Button>\n            </Card>\n          </Col>\n        </Row>\n      </div>\n      </>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}